{
  "version": 3,
  "sources": ["../../../../app/routes/account_.recover.jsx"],
  "sourcesContent": ["import { json, redirect } from '@shopify/remix-oxygen';\nimport { Form, Link, useActionData } from '@remix-run/react';\nimport Navbar from '~/Components/Navbar';\nimport Footer from '~/Components/Footer';\n\nexport async function loader({ context }) {\n  const customerAccessToken = await context.session.get('customerAccessToken');\n  if (customerAccessToken) {\n    return redirect('/account');\n  }\n\n  return json({});\n}\n\nexport async function action({ request, context }) {\n  const { storefront } = context;\n  const form = await request.formData();\n  const email = form.has('email') ? String(form.get('email')) : null;\n\n  if (request.method !== 'POST') {\n    return json({ error: 'Method not allowed' }, { status: 405 });\n  }\n\n  try {\n    if (!email) {\n      throw new Error('Please provide an email.');\n    }\n    await storefront.mutate(CUSTOMER_RECOVER_MUTATION, {\n      variables: { email },\n    });\n\n    return json({ resetRequested: true });\n  } catch (error) {\n    const resetRequested = false;\n    if (error instanceof Error) {\n      return json({ error: error.message, resetRequested }, { status: 400 });\n    }\n    return json({ error, resetRequested }, { status: 400 });\n  }\n}\n\nexport default function Recover() {\n  const action = useActionData();\n\n  return (\n    <>\n      <Navbar />\n      <div className=\"account-recover pt-5 pb-5\">\n        <div className=''>\n          <div className=\"card-recover\">\n            {action?.resetRequested ? (\n              <>\n                <h1>Request Sent.</h1>\n                <p>\n                  If that email address is in our system, you will receive an email\n                  with instructions about how to reset your password in a few\n                  minutes.\n                </p>\n                <br />\n                <Link to=\"/account/login\">Return to Login</Link>\n              </>\n            ) : (\n              <>\n                <h1>Forgot Password.</h1>\n                <p>\n                  Enter the email address associated with your account to receive a\n                  link to reset your password.\n                </p>\n                <br />\n                <Form method=\"POST\" className='d-flex'>\n                  <fieldset>\n                    <input\n                      aria-label=\"Email address\"\n                      autoComplete=\"email\"\n                      // eslint-disable-next-line jsx-a11y/no-autofocus\n                      autoFocus\n                      id=\"email\"\n                      name=\"email\"\n                      placeholder=\"Email address\"\n                      required\n                      type=\"email\"\n                    />\n                  </fieldset>\n                  <button className='recover-btn' type=\"submit\">Request Reset Link</button>\n                  {action?.error ? (\n                    <p>\n                      <mark>\n                        <small>{action.error}</small>\n                      </mark>\n                    </p>\n                  ) : (\n                    <br />\n                  )}\n                 \n                </Form>\n                <div className='login-back'>\n                  <br />\n                  <p>\n                    <Link to=\"/account/login\">Back to Login</Link>\n                  </p>\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n        </div>\n      <Footer />\n    </>\n\n  );\n}\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/mutations/customerrecover\nconst CUSTOMER_RECOVER_MUTATION = `#graphql\n  mutation customerRecover(\n    $email: String!,\n    $country: CountryCode,\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    customerRecover(email: $email) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n`;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AA8CM;AALS,SAAR,UAA2B;AAChC,QAAM,SAAS,cAAc;AAE7B,SACE,sFACE;AAAA,uDAAC,oBAAD;AAAA;AAAA;AAAA;AAAA,WAAQ;AAAA,IACR,mDAAC,SAAI,WAAU,6BACb,6DAAC,SAAI,WAAU,IACb,6DAAC,SAAI,WAAU,gBACZ,kBAAQ,iBACP,sFACE;AAAA,yDAAC,QAAG,6BAAJ;AAAA;AAAA;AAAA;AAAA,aAAiB;AAAA,MACjB,mDAAC,OAAE,sJAAH;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,MACA,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,aAAI;AAAA,MACJ,mDAAC,QAAK,IAAG,kBAAiB,+BAA1B;AAAA;AAAA;AAAA;AAAA,aAAyC;AAAA,SAR3C;AAAA;AAAA;AAAA;AAAA,WASA,IAEA,sFACE;AAAA,yDAAC,QAAG,gCAAJ;AAAA;AAAA;AAAA;AAAA,aAAoB;AAAA,MACpB,mDAAC,OAAE,8GAAH;AAAA;AAAA;AAAA;AAAA,aAGA;AAAA,MACA,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,aAAI;AAAA,MACJ,mDAAC,QAAK,QAAO,QAAO,WAAU,UAC5B;AAAA,2DAAC,cACC;AAAA,UAAC;AAAA;AAAA,YACC,cAAW;AAAA,YACX,cAAa;AAAA,YAEb,WAAS;AAAA,YACT,IAAG;AAAA,YACH,MAAK;AAAA,YACL,aAAY;AAAA,YACZ,UAAQ;AAAA,YACR,MAAK;AAAA;AAAA,UATP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAUA,KAXF;AAAA;AAAA;AAAA;AAAA,eAYA;AAAA,QACA,mDAAC,YAAO,WAAU,eAAc,MAAK,UAAS,kCAA9C;AAAA;AAAA;AAAA;AAAA,eAAgE;AAAA,QAC/D,QAAQ,QACP,mDAAC,OACC,6DAAC,UACC,6DAAC,WAAO,iBAAO,SAAf;AAAA;AAAA;AAAA;AAAA,eAAqB,KADvB;AAAA;AAAA;AAAA;AAAA,eAEA,KAHF;AAAA;AAAA;AAAA;AAAA,eAIA,IAEA,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,eAAI;AAAA,WAtBR;AAAA;AAAA;AAAA;AAAA,aAyBA;AAAA,MACA,mDAAC,SAAI,WAAU,cACb;AAAA,2DAAC,UAAD;AAAA;AAAA;AAAA;AAAA,eAAI;AAAA,QACJ,mDAAC,OACC,6DAAC,QAAK,IAAG,kBAAiB,6BAA1B;AAAA;AAAA;AAAA;AAAA,eAAuC,KADzC;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,WAJF;AAAA;AAAA;AAAA;AAAA,aAKA;AAAA,SAtCF;AAAA;AAAA;AAAA;AAAA,WAuCA,KApDJ;AAAA;AAAA;AAAA;AAAA,WAsDA,KAvDF;AAAA;AAAA;AAAA;AAAA,WAwDA,KAzDF;AAAA;AAAA;AAAA;AAAA,WA0DE;AAAA,IACF,mDAAC,oBAAD;AAAA;AAAA;AAAA;AAAA,WAAQ;AAAA,OA7DV;AAAA;AAAA;AAAA;AAAA,SA8DA;AAGJ;",
  "names": []
}
