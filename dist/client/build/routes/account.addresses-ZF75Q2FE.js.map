{
  "version": 3,
  "sources": ["../../../../app/routes/account.addresses.jsx"],
  "sourcesContent": ["import { json, redirect } from '@shopify/remix-oxygen';\nimport {\n  Form,\n  useActionData,\n  useNavigation,\n  useOutletContext,\n} from '@remix-run/react';\n\nexport const meta = () => {\n  return [{ title: 'Addresses' }];\n};\n\nexport async function loader({ context }) {\n  const { session } = context;\n  const customerAccessToken = await session.get('customerAccessToken');\n  if (!customerAccessToken) {\n    return redirect('/account/login');\n  }\n  return json({});\n}\n\nexport async function action({ request, context }) {\n  const { storefront, session } = context;\n\n  try {\n    const form = await request.formData();\n\n    const addressId = form.has('addressId')\n      ? String(form.get('addressId'))\n      : null;\n    if (!addressId) {\n      throw new Error('You must provide an address id.');\n    }\n\n    const customerAccessToken = await session.get('customerAccessToken');\n    if (!customerAccessToken) {\n      return json({ error: { [addressId]: 'Unauthorized' } }, { status: 401 });\n    }\n    const { accessToken } = customerAccessToken;\n\n    const defaultAddress = form.has('defaultAddress')\n      ? String(form.get('defaultAddress')) === 'on'\n      : null;\n    const address = {};\n    const keys = [\n      'address1',\n      'address2',\n      'city',\n      'company',\n      'country',\n      'firstName',\n      'lastName',\n      'phone',\n      'province',\n      'zip',\n    ];\n\n    for (const key of keys) {\n      const value = form.get(key);\n      if (typeof value === 'string') {\n        address[key] = value;\n      }\n    }\n\n    switch (request.method) {\n      case 'POST': {\n        // handle new address creation\n        try {\n          const { customerAddressCreate } = await storefront.mutate(\n            CREATE_ADDRESS_MUTATION,\n            {\n              variables: { customerAccessToken: accessToken, address },\n            },\n          );\n\n          if (customerAddressCreate?.customerUserErrors?.length) {\n            const error = customerAddressCreate.customerUserErrors[0];\n            throw new Error(error.message);\n          }\n\n          const createdAddress = customerAddressCreate?.customerAddress;\n          if (!createdAddress?.id) {\n            throw new Error(\n              'Expected customer address to be created, but the id is missing',\n            );\n          }\n\n          if (defaultAddress) {\n            const createdAddressId = decodeURIComponent(createdAddress.id);\n            const { customerDefaultAddressUpdate } = await storefront.mutate(\n              UPDATE_DEFAULT_ADDRESS_MUTATION,\n              {\n                variables: {\n                  customerAccessToken: accessToken,\n                  addressId: createdAddressId,\n                },\n              },\n            );\n\n            if (customerDefaultAddressUpdate?.customerUserErrors?.length) {\n              const error = customerDefaultAddressUpdate.customerUserErrors[0];\n              throw new Error(error.message);\n            }\n          }\n\n          return json({ error: null, createdAddress, defaultAddress });\n        } catch (error) {\n          if (error instanceof Error) {\n            return json({ error: { [addressId]: error.message } }, { status: 400 });\n          }\n          return json({ error: { [addressId]: error } }, { status: 400 });\n        }\n      }\n\n      case 'PUT': {\n        // handle address updates\n        try {\n          const { customerAddressUpdate } = await storefront.mutate(\n            UPDATE_ADDRESS_MUTATION,\n            {\n              variables: {\n                address,\n                customerAccessToken: accessToken,\n                id: decodeURIComponent(addressId),\n              },\n            },\n          );\n\n          const updatedAddress = customerAddressUpdate?.customerAddress;\n\n          if (customerAddressUpdate?.customerUserErrors?.length) {\n            const error = customerAddressUpdate.customerUserErrors[0];\n            throw new Error(error.message);\n          }\n\n          if (defaultAddress) {\n            const { customerDefaultAddressUpdate } = await storefront.mutate(\n              UPDATE_DEFAULT_ADDRESS_MUTATION,\n              {\n                variables: {\n                  customerAccessToken: accessToken,\n                  addressId: decodeURIComponent(addressId),\n                },\n              },\n            );\n\n            if (customerDefaultAddressUpdate?.customerUserErrors?.length) {\n              const error = customerDefaultAddressUpdate.customerUserErrors[0];\n              throw new Error(error.message);\n            }\n          }\n\n          return json({ error: null, updatedAddress, defaultAddress });\n        } catch (error) {\n          if (error instanceof Error) {\n            return json({ error: { [addressId]: error.message } }, { status: 400 });\n          }\n          return json({ error: { [addressId]: error } }, { status: 400 });\n        }\n      }\n\n      case 'DELETE': {\n        // handles address deletion\n        try {\n          const { customerAddressDelete } = await storefront.mutate(\n            DELETE_ADDRESS_MUTATION,\n            {\n              variables: { customerAccessToken: accessToken, id: addressId },\n            },\n          );\n\n          if (customerAddressDelete?.customerUserErrors?.length) {\n            const error = customerAddressDelete.customerUserErrors[0];\n            throw new Error(error.message);\n          }\n          return json({ error: null, deletedAddress: addressId });\n        } catch (error) {\n          if (error instanceof Error) {\n            return json({ error: { [addressId]: error.message } }, { status: 400 });\n          }\n          return json({ error: { [addressId]: error } }, { status: 400 });\n        }\n      }\n\n      default: {\n        return json(\n          { error: { [addressId]: 'Method not allowed' } },\n          { status: 405 },\n        );\n      }\n    }\n  } catch (error) {\n    if (error instanceof Error) {\n      return json({ error: error.message }, { status: 400 });\n    }\n    return json({ error }, { status: 400 });\n  }\n}\n\nexport default function Addresses() {\n  const { customer } = useOutletContext();\n  const { defaultAddress, addresses } = customer;\n\n  return (\n    <>\n    <div className=\"container\">\n      <div className=\"account-card profile-clr pt-5 pb-5\" style={{border:\"2px solid grey\"}}>\n        <div className=\"account-addresses container \">\n          <h2>Addresses</h2>\n          <br />\n          <div>\n            <legend></legend>\n            <ExistingAddresses\n              addresses={addresses}\n              defaultAddress={defaultAddress}\n            />\n          </div>\n          <br />\n          <hr className='add-hr'/>\n          <br />\n          <div>\n            <legend>Create address</legend>\n            <NewAddressForm />\n          </div>\n        </div>\n      </div>\n    </div>\n    </>\n  );\n}\n\nfunction NewAddressForm() {\n  const newAddress = {\n    address1: '',\n    address2: '',\n    city: '',\n    company: '',\n    country: '',\n    firstName: '',\n    id: 'new',\n    lastName: '',\n    phone: '',\n    province: '',\n    zip: '',\n  };\n\n  return (\n    <AddressForm address={newAddress} defaultAddress={null}>\n      {({ stateForMethod }) => (\n        <div>\n          <button\n            disabled={stateForMethod('POST') !== 'idle'}\n            formMethod=\"POST\"\n            type=\"submit\"\n            className='w-25 profile-btn'\n          >\n            {stateForMethod('POST') !== 'idle' ? 'Creating' : 'Create'}\n          </button>\n        </div>\n      )}\n    </AddressForm>\n  );\n}\n\nfunction ExistingAddresses({ addresses, defaultAddress }) {\n  return (\n    <div>\n      <legend>Existing addresses</legend>\n      {addresses.nodes.map((address) => (\n        <AddressForm\n          key={address.id}\n          address={address}\n          defaultAddress={defaultAddress}\n        >\n          {({ stateForMethod }) => (\n            <div>\n              <button\n                disabled={stateForMethod('PUT') !== 'idle'}\n                formMethod=\"PUT\"\n                type=\"submit\"\n                className='w-25 profile-btn'\n              >\n                {stateForMethod('PUT') !== 'idle' ? 'Saving' : 'Save'}\n              </button>\n              <button\n                disabled={stateForMethod('DELETE') !== 'idle'}\n                formMethod=\"DELETE\"\n                type=\"submit\"\n                className='w-25 ml-5 profile-btn'\n              >\n                {stateForMethod('DELETE') !== 'idle' ? 'Deleting' : 'Delete'}\n              </button>\n            </div>\n          )}\n        </AddressForm>\n      ))}\n    </div>\n  );\n}\n\nexport function AddressForm({ address, defaultAddress, children }) {\n  const { state, formMethod } = useNavigation();\n  const action = useActionData();\n  const error = action?.error?.[address.id];\n  const isDefaultAddress = defaultAddress?.id === address.id;\n  return (\n    <>\n\n      <Form id={address.id}>\n\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-lg-6 col-md-6 col-sm-12\">\n              <fieldset>\n                <input type=\"hidden\" name=\"addressId\" defaultValue={address.id} />\n                <label htmlFor=\"firstName\">First name*</label>\n                <br />\n                <input\n                  className='w-75 profile-input'\n                  aria-label=\"First name\"\n                  autoComplete=\"given-name\"\n                  defaultValue={address?.firstName ?? ''}\n                  id=\"firstName\"\n                  name=\"firstName\"\n                  placeholder=\"First name\"\n                  required\n                  type=\"text\"\n                />\n                <br />\n                <label htmlFor=\"lastName\">Last name*</label>\n                <br />\n                <input\n                  className='w-75 profile-input'\n                  aria-label=\"Last name\"\n                  autoComplete=\"family-name\"\n                  defaultValue={address?.lastName ?? ''}\n                  id=\"lastName\"\n                  name=\"lastName\"\n                  placeholder=\"Last name\"\n                  required\n                  type=\"text\"\n                />\n                <br />\n                <label htmlFor=\"company\">Company</label>\n                <br />\n                <input\n                  className='w-75 profile-input'\n                  aria-label=\"Company\"\n                  autoComplete=\"organization\"\n                  defaultValue={address?.company ?? ''}\n                  id=\"company\"\n                  name=\"company\"\n                  placeholder=\"Company\"\n                  type=\"text\"\n                />\n                <br />\n                <label htmlFor=\"address1\">Address line*</label>\n                <br />\n                <input\n                  className='w-75 profile-input'\n                  aria-label=\"Address line 1\"\n                  autoComplete=\"address-line1\"\n                  defaultValue={address?.address1 ?? ''}\n                  id=\"address1\"\n                  name=\"address1\"\n                  placeholder=\"Address line 1*\"\n                  required\n                  type=\"text\"\n                />\n                <br />\n                <label htmlFor=\"address2\">Address line 2</label>\n                <br />\n                <input\n                  className='w-75 profile-input'\n                  aria-label=\"Address line 2\"\n                  autoComplete=\"address-line2\"\n                  defaultValue={address?.address2 ?? ''}\n                  id=\"address2\"\n                  name=\"address2\"\n                  placeholder=\"Address line 2\"\n                  type=\"text\"\n                />\n              </fieldset>\n            </div>\n            <div className=\"col\">\n              <fieldset>\n                <label htmlFor=\"city\">City*</label>\n                <br />\n                <input\n                  className='w-75 profile-input'\n                  aria-label=\"City\"\n                  autoComplete=\"address-level2\"\n                  defaultValue={address?.city ?? ''}\n                  id=\"city\"\n                  name=\"city\"\n                  placeholder=\"City\"\n                  required\n                  type=\"text\"\n                />\n                <br />\n                <label htmlFor=\"province\">State / Province*</label>\n                <br />\n                <input\n                  className='w-75 profile-input'\n                  aria-label=\"State\"\n                  autoComplete=\"address-level1\"\n                  defaultValue={address?.province ?? ''}\n                  id=\"province\"\n                  name=\"province\"\n                  placeholder=\"State / Province\"\n                  required\n                  type=\"text\"\n                />\n                <br />\n                <label htmlFor=\"zip\">Zip / Postal Code*</label>\n                <br />\n                <input\n                  className='w-75 profile-input'\n                  aria-label=\"Zip\"\n                  autoComplete=\"postal-code\"\n                  defaultValue={address?.zip ?? ''}\n                  id=\"zip\"\n                  name=\"zip\"\n                  placeholder=\"Zip / Postal Code\"\n                  required\n                  type=\"text\"\n                />\n                <br />\n                <label htmlFor=\"country\">Country*</label>\n                <br />\n                <input\n                  className='w-75 profile-input'\n                  aria-label=\"Country\"\n                  autoComplete=\"country-name\"\n                  defaultValue={address?.country ?? ''}\n                  id=\"country\"\n                  name=\"country\"\n                  placeholder=\"Country\"\n                  required\n                  type=\"text\"\n                />\n                <br />\n                <label htmlFor=\"phone\">Phone</label>\n                <br />\n                <input\n                  className='w-75 profile-input'\n                  aria-label=\"Phone\"\n                  autoComplete=\"tel\"\n                  defaultValue={address?.phone ?? ''}\n                  id=\"phone\"\n                  name=\"phone\"\n                  placeholder=\"+16135551111\"\n                  pattern=\"^\\+?[1-9]\\d{3,14}$\"\n                  type=\"tel\"\n                />\n                <div>\n                  <input\n                    defaultChecked={isDefaultAddress}\n                    id=\"defaultAddress\"\n                    name=\"defaultAddress\"\n                    type=\"checkbox\"\n                  />\n                  <label htmlFor=\"defaultAddress\" className='px-2'>\n                    Set as default address\n                  </label>\n                </div>\n                {error ? (\n                  <p>\n                    <mark>\n                      <small>{error}</small>\n                    </mark>\n                  </p>\n                ) : (\n                  <br />\n                )}\n                {children({\n                  stateForMethod: (method) => (formMethod === method ? state : 'idle'),\n                })}\n              </fieldset>\n            </div>\n          </div>\n        </div>\n\n      </Form>\n\n    </>\n\n  );\n}\n\n// NOTE: https://shopify.dev/docs/api/storefront/2023-04/mutations/customeraddressupdate\nconst UPDATE_ADDRESS_MUTATION = `#graphql\n  mutation customerAddressUpdate(\n    $address: MailingAddressInput!\n    $customerAccessToken: String!\n    $id: ID!\n    $country: CountryCode\n    $language: LanguageCode\n ) @inContext(country: $country, language: $language) {\n    customerAddressUpdate(\n      address: $address\n      customerAccessToken: $customerAccessToken\n      id: $id\n    ) {\n      customerAddress {\n        id\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n`;\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/mutations/customerAddressDelete\nconst DELETE_ADDRESS_MUTATION = `#graphql\n  mutation customerAddressDelete(\n    $customerAccessToken: String!,\n    $id: ID!,\n    $country: CountryCode,\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    customerAddressDelete(customerAccessToken: $customerAccessToken, id: $id) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      deletedCustomerAddressId\n    }\n  }\n`;\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/mutations/customerdefaultaddressupdate\nconst UPDATE_DEFAULT_ADDRESS_MUTATION = `#graphql\n  mutation customerDefaultAddressUpdate(\n    $addressId: ID!\n    $customerAccessToken: String!\n    $country: CountryCode\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    customerDefaultAddressUpdate(\n      addressId: $addressId\n      customerAccessToken: $customerAccessToken\n    ) {\n      customer {\n        defaultAddress {\n          id\n        }\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n`;\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/mutations/customeraddresscreate\nconst CREATE_ADDRESS_MUTATION = `#graphql\n  mutation customerAddressCreate(\n    $address: MailingAddressInput!\n    $customerAccessToken: String!\n    $country: CountryCode\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    customerAddressCreate(\n      address: $address\n      customerAccessToken: $customerAccessToken\n    ) {\n      customerAddress {\n        id\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n`;\n"],
  "mappings": "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",
  "names": []
}
