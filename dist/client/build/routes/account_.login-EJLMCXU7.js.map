{
  "version": 3,
  "sources": ["../../../../app/routes/account_.login.jsx"],
  "sourcesContent": ["import { json, redirect } from '@shopify/remix-oxygen';\nimport { Form, Link, useActionData } from '@remix-run/react';\nimport Navbar from '~/Components/Navbar';\nimport Footer from '~/Components/Footer';\nimport React, { useState } from 'react';\n\nexport const meta = () => {\n  return [{ title: 'Login' }];\n};\n\nexport async function loader({ context }) {\n  if (await context.session.get('customerAccessToken')) {\n    return redirect('/');\n  }\n  return json({});\n}\n\nexport async function action({ request, context }) {\n  const { session, storefront } = context;\n\n  if (request.method !== 'POST') {\n    return json({ error: 'Method not allowed' }, { status: 405 });\n  }\n\n  try {\n    const form = await request.formData();\n    const email = String(form.has('email') ? form.get('email') : '');\n    const password = String(form.has('password') ? form.get('password') : '');\n    const validInputs = Boolean(email && password);\n\n    if (!validInputs) {\n      throw new Error('Please provide both an email and a password.');\n    }\n\n    const { customerAccessTokenCreate } = await storefront.mutate(\n      LOGIN_MUTATION,\n      {\n        variables: {\n          input: { email, password },\n        },\n      },\n    );\n\n    if (!customerAccessTokenCreate?.customerAccessToken?.accessToken) {\n      throw new Error(customerAccessTokenCreate?.customerUserErrors[0].message);\n    }\n\n    const { customerAccessToken } = customerAccessTokenCreate;\n    session.set('customerAccessToken', customerAccessToken);\n\n    return redirect('/', {\n      headers: {\n        'Set-Cookie': await session.commit(),\n      },\n    });\n  } catch (error) {\n    if (error instanceof Error) {\n      return json({ error: error.message }, { status: 400 });\n    }\n    return json({ error }, { status: 400 });\n  }\n}\n\nexport default function Login() {\n  const data = useActionData();\n  const error = data?.error || null;\n\n  return (\n    <>\n      <Navbar />\n      <div className=\"main-div mt-5 \">\n        <div className=\"container \">\n          <div className=\"row m-5 no-gutters shadow-lg \">\n            <div className=\"col d-none col-lg-5 d-lg-block  \">\n              <img src=\"/img/buildbody.jpg\" className=\"img-fluid login-img\" />\n            </div>\n            <div className=\"col-md-12 col-lg-7 bg-white p-5 border border-dark login-border\">\n              <h3 className=\"pb-3 text-center login-name\">Welcome To BMB!</h3>\n              <div className=\"form-style\">\n                <Form method=\"POST\">\n                  <fieldset>\n                    <div className=\"form-group pb-3 mt-4\">\n                      <input\n                        id=\"email\"\n                        className='w-100'\n                        name=\"email\"\n                        type=\"email\"\n                        autoComplete=\"email\"\n                        required\n                        placeholder=\"Email address\"\n                        aria-label=\"Email address\"\n                        autoFocus\n                      />\n                    </div>\n                    <div className=\"form-group pb-3\">\n                      <input\n                        id=\"password\"\n                        className='w-100'\n                        name=\"password\"\n                        type=\"password\"\n                        autoComplete=\"current-password\"\n                        placeholder=\"Password\"\n                        aria-label=\"Password\"\n                        minLength={8}\n                        required\n                      />\n                    </div>\n                  </fieldset>\n                  {error ? (\n                    <p>\n                      <mark>\n                        <small>{error}</small>\n                      </mark>\n                    </p>\n                  ) : (\n                    <br />\n                  )}\n                  <div className=\"d-flex align-items-center justify-content-between\">\n                    <div className=\"d-flex align-items-center\">\n                      <input name=\"\" type=\"checkbox\" value=\"\" />{' '}\n                      <span className=\"pl-2 font-weight-bold\">Remember Me</span>\n                    </div>\n                    <div>\n                      <Link to=\"/account/recover\">Forgot password \u2192</Link>\n                    </div>\n                  </div>\n                  <div className=\"pb-2\">\n                    <button\n                      type=\"submit\"\n                      className=\"btn text-light w-100 font-weight-bold mt-2 login-btn \"\n                    >\n                      Sign in\n                    </button>\n                  </div>\n                </Form>\n                <div className=\"sideline\">OR</div>\n                <div>\n                  <button\n                    type=\"submit\"\n                    className=\"btn text-light w-100 font-weight-bold mt-2 \"\n                    style={{ height: '50px', background: 'red' }}\n                  >\n                    <Link to=\"/account/register\" style={{ color: \"white\" }}>Sign Up \u2192</Link>\n                  </button>\n                </div>\n                <div className=\"pt-4 text-center\">\n                  Get Members Benefit. <Link to=\"/account/register\">Sign Up\u2192</Link>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n      <Footer />\n    </>\n  );\n}\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/mutations/customeraccesstokencreate\nconst LOGIN_MUTATION = `#graphql\n  mutation login($input: CustomerAccessTokenCreateInput!) {\n    customerAccessTokenCreate(input: $input) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n    }\n  }\n`;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAIA,IAAAA,gBAAgC;AAgE5B;AA9DG,IAAM,OAAO,MAAM;AACxB,SAAO,CAAC,EAAE,OAAO,QAAQ,CAAC;AAC5B;AAuDe,SAAR,QAAyB;AAC9B,QAAM,OAAO,cAAc;AAC3B,QAAM,QAAQ,MAAM,SAAS;AAE7B,SACE,sFACE;AAAA,uDAAC,oBAAD;AAAA;AAAA;AAAA;AAAA,WAAQ;AAAA,IACR,mDAAC,SAAI,WAAU,kBACb,6DAAC,SAAI,WAAU,cACb,6DAAC,SAAI,WAAU,iCACb;AAAA,yDAAC,SAAI,WAAU,oCACb,6DAAC,SAAI,KAAI,sBAAqB,WAAU,yBAAxC;AAAA;AAAA;AAAA;AAAA,aAA8D,KADhE;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,mDAAC,SAAI,WAAU,mEACb;AAAA,2DAAC,QAAG,WAAU,+BAA8B,+BAA5C;AAAA;AAAA;AAAA;AAAA,eAA2D;AAAA,QAC3D,mDAAC,SAAI,WAAU,cACb;AAAA,6DAAC,QAAK,QAAO,QACX;AAAA,+DAAC,cACC;AAAA,iEAAC,SAAI,WAAU,wBACb;AAAA,gBAAC;AAAA;AAAA,kBACC,IAAG;AAAA,kBACH,WAAU;AAAA,kBACV,MAAK;AAAA,kBACL,MAAK;AAAA,kBACL,cAAa;AAAA,kBACb,UAAQ;AAAA,kBACR,aAAY;AAAA,kBACZ,cAAW;AAAA,kBACX,WAAS;AAAA;AAAA,gBATX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAUA,KAXF;AAAA;AAAA;AAAA;AAAA,qBAYA;AAAA,cACA,mDAAC,SAAI,WAAU,mBACb;AAAA,gBAAC;AAAA;AAAA,kBACC,IAAG;AAAA,kBACH,WAAU;AAAA,kBACV,MAAK;AAAA,kBACL,MAAK;AAAA,kBACL,cAAa;AAAA,kBACb,aAAY;AAAA,kBACZ,cAAW;AAAA,kBACX,WAAW;AAAA,kBACX,UAAQ;AAAA;AAAA,gBATV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAUA,KAXF;AAAA;AAAA;AAAA;AAAA,qBAYA;AAAA,iBA1BF;AAAA;AAAA;AAAA;AAAA,mBA2BA;AAAA,YACC,QACC,mDAAC,OACC,6DAAC,UACC,6DAAC,WAAO,mBAAR;AAAA;AAAA;AAAA;AAAA,mBAAc,KADhB;AAAA;AAAA;AAAA;AAAA,mBAEA,KAHF;AAAA;AAAA;AAAA;AAAA,mBAIA,IAEA,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,mBAAI;AAAA,YAEN,mDAAC,SAAI,WAAU,qDACb;AAAA,iEAAC,SAAI,WAAU,6BACb;AAAA,mEAAC,WAAM,MAAK,IAAG,MAAK,YAAW,OAAM,MAArC;AAAA;AAAA;AAAA;AAAA,uBAAwC;AAAA,gBAAG;AAAA,gBAC3C,mDAAC,UAAK,WAAU,yBAAwB,2BAAxC;AAAA;AAAA;AAAA;AAAA,uBAAmD;AAAA,mBAFrD;AAAA;AAAA;AAAA;AAAA,qBAGA;AAAA,cACA,mDAAC,SACC,6DAAC,QAAK,IAAG,oBAAmB,sCAA5B;AAAA;AAAA;AAAA;AAAA,qBAA6C,KAD/C;AAAA;AAAA;AAAA;AAAA,qBAEA;AAAA,iBAPF;AAAA;AAAA;AAAA;AAAA,mBAQA;AAAA,YACA,mDAAC,SAAI,WAAU,QACb;AAAA,cAAC;AAAA;AAAA,gBACC,MAAK;AAAA,gBACL,WAAU;AAAA,gBACX;AAAA;AAAA,cAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAKA,KANF;AAAA;AAAA;AAAA;AAAA,mBAOA;AAAA,eAtDF;AAAA;AAAA;AAAA;AAAA,iBAuDA;AAAA,UACA,mDAAC,SAAI,WAAU,YAAW,kBAA1B;AAAA;AAAA;AAAA;AAAA,iBAA4B;AAAA,UAC5B,mDAAC,SACC;AAAA,YAAC;AAAA;AAAA,cACC,MAAK;AAAA,cACL,WAAU;AAAA,cACV,OAAO,EAAE,QAAQ,QAAQ,YAAY,MAAM;AAAA,cAE3C,6DAAC,QAAK,IAAG,qBAAoB,OAAO,EAAE,OAAO,QAAQ,GAAG,8BAAxD;AAAA;AAAA;AAAA;AAAA,qBAAiE;AAAA;AAAA,YALnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAMA,KAPF;AAAA;AAAA;AAAA;AAAA,iBAQA;AAAA,UACA,mDAAC,SAAI,WAAU,oBAAmB;AAAA;AAAA,YACX,mDAAC,QAAK,IAAG,qBAAoB,6BAA7B;AAAA;AAAA;AAAA;AAAA,mBAAqC;AAAA,eAD5D;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,aArEF;AAAA;AAAA;AAAA;AAAA,eAsEA;AAAA,WAxEF;AAAA;AAAA;AAAA;AAAA,aAyEA;AAAA,SA7EF;AAAA;AAAA;AAAA;AAAA,WA8EA,KA/EF;AAAA;AAAA;AAAA;AAAA,WAgFA,KAjFF;AAAA;AAAA;AAAA;AAAA,WAkFA;AAAA,IAGA,mDAAC,oBAAD;AAAA;AAAA;AAAA;AAAA,WAAQ;AAAA,OAvFV;AAAA;AAAA;AAAA;AAAA,SAwFA;AAEJ;",
  "names": ["import_react"]
}
