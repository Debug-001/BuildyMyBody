{
  "version": 3,
  "sources": ["../../../../app/routes/account_.register.jsx"],
  "sourcesContent": ["import { json, redirect } from '@shopify/remix-oxygen';\nimport { Form, Link, useActionData } from '@remix-run/react';\nimport Navbar from '~/Components/Navbar';\nimport Footer from '~/Components/Footer';\n\nexport async function loader({ context }) {\n  const customerAccessToken = await context.session.get('customerAccessToken');\n  if (customerAccessToken) {\n    return redirect('/account');\n  }\n\n  return json({});\n}\n\nexport const action = async ({ request, context }) => {\n  if (request.method !== 'POST') {\n    return json({ error: 'Method not allowed' }, { status: 405 });\n  }\n\n  const { storefront, session } = context;\n  const form = await request.formData();\n  const email = String(form.has('email') ? form.get('email') : '');\n  const password = form.has('password') ? String(form.get('password')) : null;\n  const passwordConfirm = form.has('passwordConfirm')\n    ? String(form.get('passwordConfirm'))\n    : null;\n\n  const validPasswords =\n    password && passwordConfirm && password === passwordConfirm;\n\n  const validInputs = Boolean(email && password);\n  try {\n    if (!validPasswords) {\n      throw new Error('Passwords do not match');\n    }\n\n    if (!validInputs) {\n      throw new Error('Please provide both an email and a password.');\n    }\n\n    const { customerCreate } = await storefront.mutate(CUSTOMER_CREATE_MUTATION, {\n      variables: {\n        input: { email, password },\n      },\n    });\n\n    if (customerCreate?.customerUserErrors?.length) {\n      throw new Error(customerCreate?.customerUserErrors[0].message);\n    }\n\n    const newCustomer = customerCreate?.customer;\n    if (!newCustomer?.id) {\n      throw new Error('Could not create customer');\n    }\n\n    // get an access token for the new customer\n    const { customerAccessTokenCreate } = await storefront.mutate(\n      REGISTER_LOGIN_MUTATION,\n      {\n        variables: {\n          input: {\n            email,\n            password,\n          },\n        },\n      },\n    );\n\n    if (!customerAccessTokenCreate?.customerAccessToken?.accessToken) {\n      throw new Error('Missing access token');\n    }\n    session.set(\n      'customerAccessToken',\n      customerAccessTokenCreate?.customerAccessToken,\n    );\n\n    return json(\n      { error: null, newCustomer },\n      {\n        status: 302,\n        headers: {\n          'Set-Cookie': await session.commit(),\n          Location: '/account',\n        },\n      },\n    );\n  } catch (error) {\n    if (error instanceof Error) {\n      return json({ error: error.message }, { status: 400 });\n    }\n    return json({ error }, { status: 400 });\n  }\n};\n\nexport default function Register() {\n  const data = useActionData();\n  const error = data?.error || null;\n  return (\n    <>\n      <Navbar />\n      <div className=\"main-div mt-5 \">\n        <div className=\"container \">\n          <div className=\"row m-5 no-gutters shadow-lg\">\n            <div className=\"col d-none col-lg-5 d-lg-block  \">\n              <img src=\"/img/buildbody.jpg\" className=\"img-fluid login-img\" />\n            </div>\n            <div className=\"col-md-12 col-lg-7 bg-white p-5 border border-dark login-border\">\n              <h3 className=\"pb-3 text-center login-name\">Welcome To BMB!</h3>\n              <div className=\"form-style\">\n                <Form method=\"POST\">\n                  <fieldset>\n                    <div className=\"form-group pb-3 mt-4\">\n                      <input\n                        id=\"email\"\n                        name=\"email\"\n                        type=\"email\"\n                        autoComplete=\"email\"\n                        required\n                        placeholder=\"Email address\"\n                        aria-label=\"Email address\"\n                        autoFocus\n                      />\n                    </div>\n                    <div className=\"form-group pb-3\">\n                      <input\n                        id=\"password\"\n                        name=\"password\"\n                        type=\"password\"\n                        autoComplete=\"current-password\"\n                        placeholder=\"Password\"\n                        aria-label=\"Password\"\n                        minLength={8}\n                        required\n                      />\n                    </div>\n\n                    <div className=\"form-group pb-3\">\n                      <input\n                       id=\"passwordConfirm\"\n                       name=\"passwordConfirm\"\n                       type=\"password\"\n                       autoComplete=\"current-password\"\n                       placeholder=\"Re-enter password\"\n                       aria-label=\"Re-enter password\"\n                       minLength={8}\n                       required\n                      />\n                    </div>\n                  </fieldset>\n                  {error ? (\n                    <p>\n                      <mark>\n                        <small>{error}</small>\n                      </mark>\n                    </p>\n                  ) : (\n                    <br />\n                  )}\n                  <div className=\"d-flex align-items-center justify-content-between\">\n                  </div>\n                  <div className=\"pb-2\">\n                    <button\n                      type=\"submit\"\n                      className=\"btn text-light w-100 font-weight-bold mt-2 login-btn \"\n                    >\n                      Register\n                    </button>\n                  </div>\n                </Form>\n                <div className=\"pt-4 text-center\">\n                 Already a member? <Link to=\"/account/login\">Login \u2192</Link>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"login\">\n        <h1>Register.</h1>\n        <Form method=\"POST\">\n          <fieldset>\n            <label htmlFor=\"email\">Email address</label>\n            <input\n              id=\"email\"\n              name=\"email\"\n              type=\"email\"\n              autoComplete=\"email\"\n              required\n              placeholder=\"Email address\"\n              aria-label=\"Email address\"\n              // eslint-disable-next-line jsx-a11y/no-autofocus\n              autoFocus\n            />\n            <label htmlFor=\"password\">Password</label>\n            <input\n              id=\"password\"\n              name=\"password\"\n              type=\"password\"\n              autoComplete=\"current-password\"\n              placeholder=\"Password\"\n              aria-label=\"Password\"\n              minLength={8}\n              required\n            />\n            <label htmlFor=\"passwordConfirm\">Re-enter password</label>\n            <input\n              id=\"passwordConfirm\"\n              name=\"passwordConfirm\"\n              type=\"password\"\n              autoComplete=\"current-password\"\n              placeholder=\"Re-enter password\"\n              aria-label=\"Re-enter password\"\n              minLength={8}\n              required\n            />\n          </fieldset>\n          {error ? (\n            <p>\n              <mark>\n                <small>{error}</small>\n              </mark>\n            </p>\n          ) : (\n            <br />\n          )}\n          <button type=\"submit\">Register</button>\n        </Form>\n        <br />\n        <p>\n          <Link to=\"/account/login\">Login \u2192</Link>\n        </p>\n      </div>\n      <Footer />\n    </>\n  );\n}\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/mutations/customerCreate\nconst CUSTOMER_CREATE_MUTATION = `#graphql\n  mutation customerCreate(\n    $input: CustomerCreateInput!,\n    $country: CountryCode,\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    customerCreate(input: $input) {\n      customer {\n        id\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n`;\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/mutations/customeraccesstokencreate\nconst REGISTER_LOGIN_MUTATION = `#graphql\n  mutation registerLogin(\n    $input: CustomerAccessTokenCreateInput!,\n    $country: CountryCode,\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    customerAccessTokenCreate(input: $input) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n    }\n  }\n`;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAkGI;AAJW,SAAR,WAA4B;AACjC,QAAM,OAAO,cAAc;AAC3B,QAAM,QAAQ,MAAM,SAAS;AAC7B,SACE,sFACE;AAAA,uDAAC,oBAAD;AAAA;AAAA;AAAA;AAAA,WAAQ;AAAA,IACR,mDAAC,SAAI,WAAU,kBACb,6DAAC,SAAI,WAAU,cACb,6DAAC,SAAI,WAAU,gCACb;AAAA,yDAAC,SAAI,WAAU,oCACb,6DAAC,SAAI,KAAI,sBAAqB,WAAU,yBAAxC;AAAA;AAAA;AAAA;AAAA,aAA8D,KADhE;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,mDAAC,SAAI,WAAU,mEACb;AAAA,2DAAC,QAAG,WAAU,+BAA8B,+BAA5C;AAAA;AAAA;AAAA;AAAA,eAA2D;AAAA,QAC3D,mDAAC,SAAI,WAAU,cACb;AAAA,6DAAC,QAAK,QAAO,QACX;AAAA,+DAAC,cACC;AAAA,iEAAC,SAAI,WAAU,wBACb;AAAA,gBAAC;AAAA;AAAA,kBACC,IAAG;AAAA,kBACH,MAAK;AAAA,kBACL,MAAK;AAAA,kBACL,cAAa;AAAA,kBACb,UAAQ;AAAA,kBACR,aAAY;AAAA,kBACZ,cAAW;AAAA,kBACX,WAAS;AAAA;AAAA,gBARX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cASA,KAVF;AAAA;AAAA;AAAA;AAAA,qBAWA;AAAA,cACA,mDAAC,SAAI,WAAU,mBACb;AAAA,gBAAC;AAAA;AAAA,kBACC,IAAG;AAAA,kBACH,MAAK;AAAA,kBACL,MAAK;AAAA,kBACL,cAAa;AAAA,kBACb,aAAY;AAAA,kBACZ,cAAW;AAAA,kBACX,WAAW;AAAA,kBACX,UAAQ;AAAA;AAAA,gBARV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cASA,KAVF;AAAA;AAAA;AAAA;AAAA,qBAWA;AAAA,cAEA,mDAAC,SAAI,WAAU,mBACb;AAAA,gBAAC;AAAA;AAAA,kBACA,IAAG;AAAA,kBACH,MAAK;AAAA,kBACL,MAAK;AAAA,kBACL,cAAa;AAAA,kBACb,aAAY;AAAA,kBACZ,cAAW;AAAA,kBACX,WAAW;AAAA,kBACX,UAAQ;AAAA;AAAA,gBART;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cASA,KAVF;AAAA;AAAA;AAAA;AAAA,qBAWA;AAAA,iBArCF;AAAA;AAAA;AAAA;AAAA,mBAsCA;AAAA,YACC,QACC,mDAAC,OACC,6DAAC,UACC,6DAAC,WAAO,mBAAR;AAAA;AAAA;AAAA;AAAA,mBAAc,KADhB;AAAA;AAAA;AAAA;AAAA,mBAEA,KAHF;AAAA;AAAA;AAAA;AAAA,mBAIA,IAEA,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,mBAAI;AAAA,YAEN,mDAAC,SAAI,WAAU,uDAAf;AAAA;AAAA;AAAA;AAAA,mBACA;AAAA,YACA,mDAAC,SAAI,WAAU,QACb;AAAA,cAAC;AAAA;AAAA,gBACC,MAAK;AAAA,gBACL,WAAU;AAAA,gBACX;AAAA;AAAA,cAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAKA,KANF;AAAA;AAAA;AAAA;AAAA,mBAOA;AAAA,eA1DF;AAAA;AAAA;AAAA;AAAA,iBA2DA;AAAA,UACA,mDAAC,SAAI,WAAU,oBAAmB;AAAA;AAAA,YACf,mDAAC,QAAK,IAAG,kBAAiB,4BAA1B;AAAA;AAAA;AAAA;AAAA,mBAAiC;AAAA,eADpD;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,aA/DF;AAAA;AAAA;AAAA;AAAA,eAgEA;AAAA,WAlEF;AAAA;AAAA;AAAA;AAAA,aAmEA;AAAA,SAvEF;AAAA;AAAA;AAAA;AAAA,WAwEA,KAzEF;AAAA;AAAA;AAAA;AAAA,WA0EA,KA3EF;AAAA;AAAA;AAAA;AAAA,WA4EA;AAAA,IAEA,mDAAC,SAAI,WAAU,SACb;AAAA,yDAAC,QAAG,yBAAJ;AAAA;AAAA;AAAA;AAAA,aAAa;AAAA,MACb,mDAAC,QAAK,QAAO,QACX;AAAA,2DAAC,cACC;AAAA,6DAAC,WAAM,SAAQ,SAAQ,6BAAvB;AAAA;AAAA;AAAA;AAAA,iBAAoC;AAAA,UACpC;AAAA,YAAC;AAAA;AAAA,cACC,IAAG;AAAA,cACH,MAAK;AAAA,cACL,MAAK;AAAA,cACL,cAAa;AAAA,cACb,UAAQ;AAAA,cACR,aAAY;AAAA,cACZ,cAAW;AAAA,cAEX,WAAS;AAAA;AAAA,YATX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAUA;AAAA,UACA,mDAAC,WAAM,SAAQ,YAAW,wBAA1B;AAAA;AAAA;AAAA;AAAA,iBAAkC;AAAA,UAClC;AAAA,YAAC;AAAA;AAAA,cACC,IAAG;AAAA,cACH,MAAK;AAAA,cACL,MAAK;AAAA,cACL,cAAa;AAAA,cACb,aAAY;AAAA,cACZ,cAAW;AAAA,cACX,WAAW;AAAA,cACX,UAAQ;AAAA;AAAA,YARV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UASA;AAAA,UACA,mDAAC,WAAM,SAAQ,mBAAkB,iCAAjC;AAAA;AAAA;AAAA;AAAA,iBAAkD;AAAA,UAClD;AAAA,YAAC;AAAA;AAAA,cACC,IAAG;AAAA,cACH,MAAK;AAAA,cACL,MAAK;AAAA,cACL,cAAa;AAAA,cACb,aAAY;AAAA,cACZ,cAAW;AAAA,cACX,WAAW;AAAA,cACX,UAAQ;AAAA;AAAA,YARV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UASA;AAAA,aAlCF;AAAA;AAAA;AAAA;AAAA,eAmCA;AAAA,QACC,QACC,mDAAC,OACC,6DAAC,UACC,6DAAC,WAAO,mBAAR;AAAA;AAAA;AAAA;AAAA,eAAc,KADhB;AAAA;AAAA;AAAA;AAAA,eAEA,KAHF;AAAA;AAAA;AAAA;AAAA,eAIA,IAEA,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,eAAI;AAAA,QAEN,mDAAC,YAAO,MAAK,UAAS,wBAAtB;AAAA;AAAA;AAAA;AAAA,eAA8B;AAAA,WA9ChC;AAAA;AAAA;AAAA;AAAA,aA+CA;AAAA,MACA,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,aAAI;AAAA,MACJ,mDAAC,OACC,6DAAC,QAAK,IAAG,kBAAiB,4BAA1B;AAAA;AAAA;AAAA;AAAA,aAAiC,KADnC;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SArDF;AAAA;AAAA;AAAA;AAAA,WAsDA;AAAA,IACA,mDAAC,oBAAD;AAAA;AAAA;AAAA;AAAA,WAAQ;AAAA,OAvIV;AAAA;AAAA;AAAA;AAAA,SAwIA;AAEJ;",
  "names": []
}
