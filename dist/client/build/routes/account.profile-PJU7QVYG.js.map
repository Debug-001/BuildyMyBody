{
  "version": 3,
  "sources": ["../../../../app/routes/account.profile.jsx"],
  "sourcesContent": ["import { json, redirect } from '@shopify/remix-oxygen';\nimport {\n  Form,\n  useActionData,\n  useNavigation,\n  useOutletContext,\n} from '@remix-run/react';\n// import Footer from '~/Components/Footer';\n\nexport const meta = () => {\n  return [{ title: 'Profile' }];\n};\n\n\n\n\nexport async function loader({ context }) {\n  const customerAccessToken = await context.session.get('customerAccessToken');\n  if (!customerAccessToken) {\n    return redirect('/account/login');\n  }\n  return json({});\n}\n\nexport async function action({ request, context }) {\n  const { session, storefront } = context;\n\n  if (request.method !== 'PUT') {\n    return json({ error: 'Method not allowed' }, { status: 405 });\n  }\n\n  const form = await request.formData();\n  const customerAccessToken = await session.get('customerAccessToken');\n  if (!customerAccessToken) {\n    return json({ error: 'Unauthorized' }, { status: 401 });\n  }\n\n  try {\n    const password = getPassword(form);\n    const customer = {};\n    const validInputKeys = [\n      'firstName',\n      'lastName',\n      'email',\n      'password',\n      'phone',\n    ];\n    for (const [key, value] of form.entries()) {\n      if (!validInputKeys.includes(key)) {\n        continue;\n      }\n      if (key === 'acceptsMarketing') {\n        customer.acceptsMarketing = value === 'on';\n      }\n      if (typeof value === 'string' && value.length) {\n        customer[key] = value;\n      }\n    }\n\n    if (password) {\n      customer.password = password;\n    }\n\n    // update customer and possibly password\n    const updated = await storefront.mutate(CUSTOMER_UPDATE_MUTATION, {\n      variables: {\n        customerAccessToken: customerAccessToken.accessToken,\n        customer,\n      },\n    });\n\n    // check for mutation errors\n    if (updated.customerUpdate?.customerUserErrors?.length) {\n      return json(\n        { error: updated.customerUpdate?.customerUserErrors[0] },\n        { status: 400 },\n      );\n    }\n\n    // update session with the updated access token\n    if (updated.customerUpdate?.customerAccessToken?.accessToken) {\n      session.set(\n        'customerAccessToken',\n        updated.customerUpdate?.customerAccessToken,\n      );\n    }\n\n    return json(\n      { error: null, customer: updated.customerUpdate?.customer },\n      {\n        headers: {\n          'Set-Cookie': await session.commit(),\n        },\n      },\n    );\n  } catch (error) {\n    return json({ error: error.message, customer: null }, { status: 400 });\n  }\n}\n\nexport default function AccountProfile() {\n  const account = useOutletContext();\n  const { state } = useNavigation();\n  const action = useActionData();\n  const customer = action?.customer ?? account?.customer;\n\n  return (\n    <>\n      <div className='profile-clr pb-5 '>\n        <div className=\"container\">\n          <div className=\"account-profile\">\n            <h2 style={{color:\"#ff2828\"}}>\n              <em className=''>My Profile</em>\n            </h2>\n            <hr style={{width:\"30%\"}} className='bg-dark'/>\n            {/* <br /> */}\n            <Form method=\"PUT\" className='mt-5'>\n              <div className=\"row\">\n                <div className=\"col \">\n                  <legend className=''>Personal information</legend>\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col-sm-12 col-md-6 col-lg-6\">\n                  <fieldset>\n                    <label htmlFor=\"firstName\" className='profile-name '>First name</label> <br />\n                    <input\n                      className=' profile-input w-100'\n                      id=\"firstName\"\n                      name=\"firstName\"\n                      type=\"text\"\n                      autoComplete=\"given-name\"\n                      placeholder=\"First name\"\n                      aria-label=\"First name\"\n                      defaultValue={customer.firstName ?? ''}\n                      minLength={2}\n                    />\n                    <br />\n                    <label htmlFor=\"lastName\" className='profile-name '>Last name</label>\n                    <br />\n                    <input\n                      className=' profile-input w-100'\n                      id=\"lastName\"\n                      name=\"lastName\"\n                      type=\"text\"\n                      autoComplete=\"family-name\"\n                      placeholder=\"Last name\"\n                      aria-label=\"Last name\"\n                      defaultValue={customer.lastName ?? ''}\n                      minLength={2}\n                    />\n                  </fieldset>\n                </div>\n                <div className=\"col \">\n                  <fieldset>\n                    <label htmlFor=\"phone\" className='profile-name '>Mobile</label>\n                    <br />\n                    <input\n                      className=' profile-input w-100'\n                      id=\"phone\"\n                      name=\"phone\"\n                      type=\"tel\"\n                      autoComplete=\"tel\"\n                      placeholder=\"Mobile\"\n                      aria-label=\"Mobile\"\n                      defaultValue={customer.phone ?? ''}\n                    />\n                    <br />\n                    <label htmlFor=\"email\" className='profile-name '>Email address</label>\n                    <br />\n                    <input\n                      className=' profile-input w-100'\n                      id=\"email\"\n                      name=\"email\"\n                      type=\"email\"\n                      autoComplete=\"email\"\n                      required\n                      placeholder=\"Email address\"\n                      aria-label=\"Email address\"\n                      defaultValue={customer.email ?? ''}\n                    />\n                    <div className=\"account-profile-marketing\">\n                      <input\n                        id=\"acceptsMarketing\"\n                        name=\"acceptsMarketing\"\n                        type=\"checkbox\"\n                        placeholder=\"Accept marketing\"\n                        aria-label=\"Accept marketing\"\n                        defaultChecked={customer.acceptsMarketing}\n                      />\n                      <label htmlFor=\"acceptsMarketing\">\n                        <p className='ml-2 '>\n                          Subscribed to marketing communications\n                        </p>\n\n                      </label>\n                    </div>\n                    <div className=\"\">\n                      <button className='w-25 p-1 profile-btn-display2 profile-btn'>\n                        Edit\n                      </button>\n                    </div>\n                  </fieldset>\n                </div>\n              </div>\n\n\n              <br />\n              <div className=\"row\">\n                <div className=\"col \">\n                  <legend className='' >Change password (optional)</legend>\n                </div>\n                <div className=\"col-sm-12 col-lg-6 col-md-6 d-flex justify-content-lg-end justify-content-md-end  \">\n                  <button type=\"submit\" className='w-25 text-center p-1 profile-btn-display3 profile-btn' disabled={state !== 'idle'}>\n                    {state !== 'idle' ? 'Updating' : 'Update'}\n                  </button>\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col-lg-8 col-sm-12\">\n                  {/* <legend>Change password (optional)</legend> */}\n                  <fieldset>\n                    <div className=\"row\">\n                      <div className=\"col\">\n                        <label htmlFor=\"currentPassword\" className='profile-name '>Current password</label>\n                        <input\n                          className=' profile-input w-100'\n                          id=\"currentPassword\"\n                          name=\"currentPassword\"\n                          type=\"password\"\n                          autoComplete=\"current-password\"\n                          placeholder=\"Current password\"\n                          aria-label=\"Current password\"\n                          minLength={8}\n                        />\n\n                        <label htmlFor=\"newPassword\" className='profile-name '>New password</label>\n                        <input\n\n                          className='  profile-input w-100'\n                          id=\"newPassword\"\n                          name=\"newPassword\"\n                          type=\"password\"\n                          placeholder=\"New password\"\n                          aria-label=\"New password\"\n                          minLength={8}\n                        />\n\n                        <label htmlFor=\"newPasswordConfirm\" className='profile-name '>New password (confirm)</label>\n\n                        <input\n                          className='  profile-input w-100'\n                          id=\"newPasswordConfirm\"\n                          name=\"newPasswordConfirm\"\n                          type=\"password\"\n                          placeholder=\"New password (confirm)\"\n                          aria-label=\"New password confirm\"\n                          minLength={8}\n                        />\n                        <br />\n                        <small className='' style={{ color: 'blue' }}>Passwords must be at least 8 characters.</small>\n                      </div>\n\n\n\n                    </div>\n                    <div className=\" profile-btn-display4\">\n                      <button type=\"submit\" className='w-25 text-center p-1 profile-btn' disabled={state !== 'idle'}>\n                        {state !== 'idle' ? 'Updating' : 'Update'}\n                      </button>\n                    </div>\n\n                  </fieldset>\n                  {action?.error ? (\n                    <p>\n                      <mark>\n                        <small>{action.error}</small>\n                      </mark>\n                    </p>\n                  ) : (\n                    <br />\n                  )}\n                </div>\n\n\n              </div>\n\n            </Form>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n{/* {action?.error ? (\n            <p>\n              <mark>\n                <small>{action.error.message}</small>\n              </mark>\n            </p>\n          ) : (\n            <br />\n          )}\n<button type=\"submit\" disabled={state !== 'idle'}>\n  {state !== 'idle' ? 'Updating' : 'Update'}\n</button> */}\n\nfunction getPassword(form) {\n  let password;\n  const currentPassword = form.get('currentPassword');\n  const newPassword = form.get('newPassword');\n  const newPasswordConfirm = form.get('newPasswordConfirm');\n\n  let passwordError;\n  if (newPassword && !currentPassword) {\n    passwordError = new Error('Current password is required.');\n  }\n\n  if (newPassword && newPassword !== newPasswordConfirm) {\n    passwordError = new Error('New passwords must match.');\n  }\n\n  if (newPassword && currentPassword && newPassword === currentPassword) {\n    passwordError = new Error(\n      'New password must be different than current password.',\n    );\n  }\n\n  if (passwordError) {\n    throw passwordError;\n  }\n\n  if (currentPassword && newPassword) {\n    password = newPassword;\n  } else {\n    password = currentPassword;\n  }\n\n  return String(password);\n}\n\nconst CUSTOMER_UPDATE_MUTATION = `#graphql\n  # https://shopify.dev/docs/api/storefront/latest/mutations/customerUpdate\n  mutation customerUpdate(\n    $customerAccessToken: String!,\n    $customer: CustomerUpdateInput!\n    $country: CountryCode\n    $language: LanguageCode\n  ) @inContext(language: $language, country: $country) {\n    customerUpdate(customerAccessToken: $customerAccessToken, customer: $customer) {\n      customer {\n        acceptsMarketing\n        email\n        firstName\n        id\n        lastName\n        phone\n      }\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n`;\n"],
  "mappings": "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",
  "names": []
}
