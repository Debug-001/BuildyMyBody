{
  "version": 3,
  "sources": ["../../../../app/routes/account.jsx"],
  "sourcesContent": ["import {Form, NavLink, Outlet, useLoaderData} from '@remix-run/react';\nimport {json, redirect} from '@shopify/remix-oxygen';\nimport Footer from '~/Components/Footer';\nimport Navbar from '~/Components/Navbar';\n\nexport function shouldRevalidate() {\n  return true;\n}\n\nexport async function loader({request, context}) {\n  const {session, storefront} = context;\n  const {pathname} = new URL(request.url);\n  const customerAccessToken = await session.get('customerAccessToken');\n  const isLoggedIn = Boolean(customerAccessToken?.accessToken);\n  const isAccountHome = pathname === '/account' || pathname === '/account/';\n  const isPrivateRoute =\n    /^\\/account\\/(orders|orders\\/.*|profile|addresses|addresses\\/.*)$/.test(\n      pathname,\n    );\n\n  if (!isLoggedIn) {\n    if (isPrivateRoute || isAccountHome) {\n      session.unset('customerAccessToken');\n      return redirect('/account/login', {\n        headers: {\n          'Set-Cookie': await session.commit(),\n        },\n      });\n    } else {\n      // public subroute such as /account/login...\n      return json({\n        isLoggedIn: false,\n        isAccountHome,\n        isPrivateRoute,\n        customer: null,\n      });\n    }\n  } else {\n    // loggedIn, default redirect to the orders page\n    if (isAccountHome) {\n      return redirect('/account/orders');\n    }\n  }\n\n  try {\n    const {customer} = await storefront.query(CUSTOMER_QUERY, {\n      variables: {\n        customerAccessToken: customerAccessToken.accessToken,\n        country: storefront.i18n.country,\n        language: storefront.i18n.language,\n      },\n      cache: storefront.CacheNone(),\n    });\n\n    if (!customer) {\n      throw new Error('Customer not found');\n    }\n\n    return json(\n      {isLoggedIn, isPrivateRoute, isAccountHome, customer},\n      {\n        headers: {\n          'Cache-Control': 'no-cache, no-store, must-revalidate',\n        },\n      },\n    );\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error('There was a problem loading account', error);\n    session.unset('customerAccessToken');\n    return redirect('/account/login', {\n      headers: {\n        'Set-Cookie': await session.commit(),\n      },\n    });\n  }\n}\n\nexport default function Acccount() {\n  const {customer, isPrivateRoute, isAccountHome} = useLoaderData();\n\n  if (!isPrivateRoute && !isAccountHome) {\n    return <Outlet context={{customer}} />;\n  }\n\n  return (\n    <AccountLayout customer={customer}>\n      <br />\n      <br />\n      <Outlet context={{customer}} />\n    </AccountLayout>\n  );\n}\n\nfunction AccountLayout({customer, children}) {\n  const firstName = customer?.firstName;\n  const lastName = customer?.lastName;\n  let heading;\n  if (firstName && lastName) {\n    heading = `Welcome, ${firstName} ${lastName}`;\n  } else if (firstName) {\n    heading = `Welcome, ${firstName}`;\n  } else {\n    heading = 'Welcome to your account.';\n  }\n  return (\n    <>\n      <Navbar />\n      <div className=\"account pt-5 pb-5\">\n        <div\n          className=\"d-flex justify-content-center mb-5\"\n          style={{flexDirection: 'column', alignItems: 'center'}}\n        >\n          <h1\n            className=\"font-weight-bold custom-heading3\"\n            style={{color: '#ff2828'}}\n          >\n            <em>{heading}</em>\n          </h1>\n          <hr className=\"h1-hr\" />\n        </div>\n        <br />\n        <AcccountMenu />\n        {children}\n      </div>\n      <Footer />\n    </>\n  );\n}\n\nfunction AcccountMenu() {\n  function isActiveStyle({isActive, isPending}) {\n    return {\n      fontWeight: isActive ? 'bold' : '',\n      color: isPending ? 'grey' : 'black',\n    };\n  }\n  return (\n    <>\n      <div className=\"account_menu\">\n        <div className=\"card-acc d-flex justify-content-center \">\n          <nav\n            role=\"navigation\"\n            style={{display: 'flex', gap: '2rem', fontSize: '1.4rem'}}\n          >\n            <NavLink to=\"/account/orders\" style={isActiveStyle}>\n              My Orders &nbsp;\n            </NavLink>\n            <NavLink to=\"/account/profile\" style={isActiveStyle}>\n              &nbsp;Profile &nbsp;\n            </NavLink>\n            <NavLink to=\"/account/addresses\" style={isActiveStyle}>\n              &nbsp;Saved Addresses &nbsp;\n            </NavLink>\n            <Logout />\n          </nav>\n        </div>\n      </div>\n    </>\n  );\n}\n\nfunction Logout() {\n  return (\n    <>\n      <Form className=\"account-logout\" method=\"POST\" action=\"/account/logout\">\n        &nbsp;\n        <button type=\"submit\" className=\"btn-logout\">\n          Sign out\n        </button>\n      </Form>\n    </>\n  );\n}\n\nexport const CUSTOMER_FRAGMENT = `#graphql\n  fragment Customer on Customer {\n    acceptsMarketing\n    addresses(first: 6) {\n      nodes {\n        ...Address\n      }\n    }\n    defaultAddress {\n      ...Address\n    }\n    email\n    firstName\n    lastName\n    numberOfOrders\n    phone\n  }\n  fragment Address on MailingAddress {\n    id\n    formatted\n    firstName\n    lastName\n    company\n    address1\n    address2\n    country\n    province\n    city\n    zip\n    phone\n  }\n`;\n\n// NOTE: https://shopify.dev/docs/api/storefront/latest/queries/customer\nconst CUSTOMER_QUERY = `#graphql\n  query Customer(\n    $customerAccessToken: String!\n    $country: CountryCode\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    customer(customerAccessToken: $customerAccessToken) {\n      ...Customer\n    }\n  }\n  ${CUSTOMER_FRAGMENT}\n`;\n"],
  "mappings": "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",
  "names": []
}
